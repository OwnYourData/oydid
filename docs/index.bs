<pre class='metadata'>
Title: OYD DID Method
Shortname: oydid-spec
Level: 1
Status: w3c/CG-DRAFT
Group: w3c-ccg
URL: https://ownyourdata.github.io/oydid/

Editor: Christoph Fabianek, OwnYourData https://OwnYourData.eu, christoph@ownyourdata.eu, https://www.linkedin.com/in/fabianek/
Editor: Wolfgang Kampichler, OwnYourData https://OwnYourData.eu, wolfgang.kampichler@gmail.com

Abstract: Draft recommendations for use of a self-sustained environment to manage decentralized identifiers
Markup Shorthands: markdown yes
</pre>

<pre class="biblio">
{
    "DID-CORE": {
        "authors": [ "Manu Sporny", "Amy Guy", "Markus Sabadello", "Drummond Reed" ],
        "href": "https://www.w3.org/TR/did-core/",
        "title": "Decentralized Identifiers (DIDs) v1.0",
        "status": "W3C Proposed Recommendation",
        "publisher": "W3C"
    },
    "MULTIBASE": {
        "href": "https://tools.ietf.org/html/draft-multiformats-multibase",
        "title": "IETF Multibase Data Format specification"
    },
    "MULTIHASH": {
        "href": "https://github.com/multiformats/multihash",
        "title": "Multihash - protocol for differentiating outputs from various well-established cryptographic hash functions"
    }
}
</pre>

This specification is not a W3C Standard nor is it on the W3C Standards Track. Learn more about [W3C Community and Business Groups](https://www.w3.org/community/). [GitHub Issues](https://github.com/OwnYourData/oydid/issues) are preferred for discussion of this specification.

## History ## {#history}

* Version 0.3: 19 October 2021 (initial public release, [link](https://github.com/OwnYourData/oydid/blob/main/docs/did-spec_v03.md))
* Version 0.4: 7 January 2022 (current version)

Introduction {#intro}
============

Decentralized Identifiers (DIDs) [[DID-CORE]] are a new type of identifier for verifiable, decentralized digital identity. These new identifiers are designed to enable the controller of a DID to prove control over it and to be implemented independently of any centralized registry, identity provider, or certificate authority. These sorts of identifiers often utilize a heavy-weight registry, such as ones utilizing Decentralized Ledger Technologies (DLT), to create, read, update, and deactivate DIDs.

While DLT-based DID Methods have great decentralization characteristics, and some of the more centralized DID Methods provide strong system control guarantees, the general approaches tend to be expensive to set up and operate. OYDID takes the approach to not maintain DID and DID Document on a public ledger but on one or more local storages (that might be publicly available). Through cryptographically linking the DID Identifier to the DID Document, and furthermore linking the DID Document to a chained provenance trail the same security and validation properties as a traditional DID can be maintained while avoiding highly redundant storage and also works in settings without general public access.

The rest of this document outlines the syntax for the `did:oyd` method, the operations it supports, and some security and privacy considerations as well as ehtical aspects that implementers might want to be aware of when using this DID method.


The `did:oyd` Format {#format}
====================

The format for the `did:oyd` method conforms to the DID core specification [[DID-CORE]] as outlined by W3C. It consists of the `did:oyd` prefix, followed by a Multibase [[MULTIBASE]] (default: `base58-btc`) encoded value that is a Multihash [[MULTIHASH]] (default: `sha2-256`) value of composed of information from the payload, keys, and log.

The detailed calculation of the DID identifier from the internal document and log information via ABNF is described here:

<pre class=include-code>
path: res/oydid.abnf
highlight: abnf
</pre>

DID Operations {#operations}
==============

The following section outlines the DID operations for the `did:oyd` method.

## Create (Register) ## {#create}

Creating a `did:oyd` identifier requires 

* a payload (e.g., service endpoints) as JSON document and    
* two cryptographic key pairs (default: ED25519) 

in the format described in Section [[#format]] (`public-doc-key-encoded`, `public-revocation-key-encoded`).

The DID document and associated log entries are stored in a registry accessible by relevant stakeholders. An example is given below (<em>[EXAMPLE 1](#example_did_artefacts)</em>) listing a payload, internal and W3C conform DID document, log entries, private keys, and private revocation document.

<div class=example id=example_did_artefacts>
An example DID with all associated information and representations:

* DID
* Payload
* Internal DID document
* W3C conform DID document
* Log entries
* Private doc key
* Private revocation key
* Private revocation document


**DID:** `did:oyd:zQmZ8DEGQtJcpoQDMKYJkTiQn9dQLM2QzvmDQXuj8vCfvdj`

**Payload:**
```
{
    "foo": "bar"
}
```

**Internal DID document:**
```
{
    "doc": {
        "foo": "bar"
    },
    "key": "z2MC8dVTmUN5sR4pf5H8CiEPJiqqsdyTSp8Jd8YZ8MBR3:zBD5cx11PaXDLG7vUmhKBzDeZnXFPAaNTqpWFZsAQom2M",
    "log": "zQmcE3b3ENZ5aDCyCcqe2wsbUytUexBubaUuAfTTfTJ7dhA"
}
```

**W3C conform DID document:**
```
{
    "@context": "https://www.w3.org/ns/did/v1",
    "id": "did:oyd:zQmaV8M4Pazau8WWwsVeyMQWmmckHXr1L2UPtyEjqfy6wXe",
    "verificationMethod": [{
        "id": "did:oyd:zQmaV8M4Pazau8WWwsVeyMQWmmckHXr1L2UPtyEjqfy6wXe",
        "type": "Ed25519VerificationKey2018",
        "controller": "did:oyd:zQmaV8M4Pazau8WWwsVeyMQWmmckHXr1L2UPtyEjqfy6wXe",
        "publicKeyBase58": "z2MC8dVTmUN5sR4pf5H8CiEPJiqqsdyTSp8Jd8YZ8MBR3"
    }],
    "keyAgreement": [{
        "id": "did:oyd:zQmaV8M4Pazau8WWwsVeyMQWmmckHXr1L2UPtyEjqfy6wXe",
        "type": "X25519KeyAgreementKey2019",
        "controller": "did:oyd:zQmaV8M4Pazau8WWwsVeyMQWmmckHXr1L2UPtyEjqfy6wXe",
        "publicKeyBase58": "zBD5cx11PaXDLG7vUmhKBzDeZnXFPAaNTqpWFZsAQom2M"
    }],
    "service": [{
        "foo": "bar"
    }]
}
```

**Log entries:**
```
[{
    "ts": 1633298265,
    "op": 2,
    "doc": "zQmaV8M4Pazau8WWwsVeyMQWmmckHXr1L2UPtyEjqfy6wXe",
    "sig": "z2useWt4sdvyhS9ShFdVVUaF4can1dZP3me2ZZYCoSCppendHnhRH8t9MprMCeG7Z8m8Yc77WhqBXLpzQ9gbA5SQU",
    "previous": []
}, {
    "ts": 1633298265,
    "op": 0,
    "doc": "zQmSNQmMSZixRoDWAorp8FsSmonGn6R2EKhNbEZCZqQEL7J",
    "sig": "z4vr45B8M91xRaMuWXgX796JA2p1WfQ2i6URMtULwKtz4cgjSVDxDUgVdKBM9Ftn6RoAsgE6C2EDp2YaRUVQgNWVB",
    "previous": []
}]
```

**Private doc key:** `z8H1vqLXBt566s7Zt8Zpr4qYLvh4dngS4bb9vuwX4X3n7`

**Private revocation key:** `z4oACjiKVzDTdHuocH3DDqhdSBqsVpQb1HBZo7rAJduz4`

**Private revocation document:**
```
{
    "ts": 1633298265,
    "op": 1,
    "doc": "zQmaE6SWSzdW8dhub7K4fff5NHUy9bieEwarPZDq7BubaJr",
    "sig": "z4o77Eq665Bjp5KfHc4x7PTvwnyF9LhgUB7n4u5Skqi7Wv1CaGdXknvUQjdimzNTtpXpf4uDCciDfe2vn6SyBR4Vk"
}
```
</div>


## Read (Resolve) ## {#read}

Reading a `did:oyd` is a matter of searching for a DID document that either can be directly linked (through hashing and encoding) to the provided identifier or through traversing through the log to unambiguously link the provided identifier to the latest version of the DID document. Cryptographic proof for the link between DID Identifier and DID Document, ownership, and completeness is performed in the following steps (here the example for a newly created DID without any updates so far):

1. the identifier is the encoded hash value of the internal DID document (the hashing algorithm is encoded in the identifier using MULTIHASH, default: `SHA2-256`, the encoding algorithm is also encoded in the identifier using MULTIBASE, default: `base58-btc`)

2. the DID document includes public keys (encoded with MULTIBASE, default: `base58-btc`) and the hash value of a DID log entry

3. the log entry (create, op=2) for the DID document provides a signature ("sig") of the identifier ("doc") to prove possession of the private key, i.e., use the public ED25519 payload key in the DID document to verify this signature)

4. the other log entry (terminate, op=0) provides revocation info; in case a log entry with the stated hash in doc exists the DID resolving process must continue

An example is given below (<em>[EXAMPLE 2](#example_did_resolving)</em>) depicting the log entries to be evaluated for linking an old DID identifier (DID v1) to the content of DID v2.

<div class=example id=example_did_resolving>
Visualization and process of linked log entries to resolve a DID identifier

<p align="center">
  <img src="res/DIDv2dag.png" width="350"><br>
  <em>Figure 1: Visualization of log entries</em>
</p>
</div>

Process:
1. User wants to resolves DID v1 and queries OYDID registry with identifier
2. OYDID registry responds with (outdated) DID document for DID v1 and log entries "create" and "terminate" (shown on the very left in the picture above)
3. Resolver (automatically) queries the OYDID registry for a revocation log entry with the hash stored in the terminate entry
4. OYDID repository returns revoke entry
5. Resolver (automatically) queries the OYDID registry for log entries that hold the hash value of the revoke entry
6. OYDID repository must retrieve exactly one update entry (and associated terminate entry) plus associated DID document (DID v2) as linked by the update entry
7. Resolver validates linked hash entries and queries again OYDID registry for a revocation log entry from the second terminate entry (shown on the very right in the picture above)
8. OYDID repository finds no information of such a revocation entry and therefore the resolver can return DID v2 as the latest document

Note: it is in the interest of the owner to publish revocation entries and make those easily accessible to ensure that even outdated DID identifier resolve to the latest DID document


## Update ## {#update}

Updating in `did:oyd` is providing a new DID document (and/or new keys for key rotation) while also publishing the revocation document and signing with original keys to prove ownership. An example is given below (<em>[EXAMPLE 3](#example_did_update)</em>) of all log entries for an updated DID.

<div class=example id=example_did_update>
Log information of an update DID.

```
[{
    "ts": 1633300869,
    "op": 2,
    "doc": "zQmdxfGRfFEnLoJ9RTiyzG9TPBhK7q6zsqrGFVzuxVPv4dq",
    "sig": "ziY1pSb9irVMykHotX1UDsNXP8V6iF4REVqfk2trQP9rtooAKcMkXHgjz8VTC3FEDTjKk6D2Z3ywLer1i9NKaLo4",
    "previous": []
}, {
    "ts": 1633300869,
    "op": 0,
    "doc": "zQmVnLPgFYYNf4GEzzD3gLbSR4xhpdk7dU4BWQR4pJr7R4Z",
    "sig": "z2gJqK2bGP5VfZdCVijBeuUtzxiNaZm4NNMH6zm4EVG2LD4rqZg62c5craaQwEPEjxSbgjH4kE79DPwddghiNjirk",
    "previous": []
}, {
    "ts": 1633300869,
    "op": 1,
    "doc": "zQmVYqZoGSncYGybUnZi514niKgju68B6AVp7KJAdVifsYU",
    "sig": "z461mfYfCvLvkeeN9vdd1yNoqFBpKAwFHD1xLRQUb4evBwEXCJLZXT9qcfQo54VTrr3eow3mJHZ3aGa7inuP29ZXg",
    "previous": ["zQmVDzKVeyj4k8RYWHtKdML6MXUZX8Lu4LiiS46SfhQkZfG", 
                 "zQmSjHywvbeHV1JzsLwexzXS9246vzHkyBUkwSbXDH5f1gg"]
}, {
    "ts": 1633300910,
    "op": 3,
    "doc": "zQmNUV1MJ5xKkFm6Lc9EKqAauGzbKP7amvbyxsx79mKwqPB",
    "sig": "z2UMg3AhegwzuMgrJ1bTRDyu9W9Kp8G7ERZi2Kin3JG8UhwJqf1yivNEYY5JvB9aPDfH8GEEw9Mbvscqhk1LJH8cp",
    "previous": ["zQmetSQY5UZd91ubdWyQTh2gqVuKwkUVtjamh33p7spaYVR"]
}, {
    "ts": 1633300910,
    "op": 0,
    "doc": "zQmQTdAmqxuQQB2yBj4qZoS4ooNUnL7PzwUydEepDqjJHd4",
    "sig": "z5Bh8VwnUUQzFruVJosySBDfJJy5CRADbpYHjNH2qFjcCx71J6QJxttVhfnh7ZgfZpir9ghsNk24g3vRrDkvhR3jZ",
    "previous": []
}]
```
</div>

## Deactivate ## {#deactivate}

Deactivating an OYDID is simply done by publishing the private revocation entry without providing any update record. The figure below depicts the log representing a deactivated DID.

<p align="center">
  <img src="res/DIDdeactivated.png" width="400"><br>
  <em>Figure 3: Visualization of log graph for a deactivated DID</em>
</p>



DID Log {#log}
=======

The log is a directed acyclic graph (DAG) and represents the life cycle of a DID. Each element in this graph holds the following attributes:

<xmp highlight=json>
{
    "ts": int,
    "op": int,
    "doc": string (hash),
    "sig": string (signature of hash),
    "previous": [ array of strings (hashes) ]
}
</xmp>

## Log Operations ## {#log_ops}

The following list describes all available log operations (`op`) and specific use of attributes:    

* **Terminate** (`op=0`): confirms last entry until revoke entry is published<br>
    *doc*: hash of revoke entry<br>
    *sig*: doc signed by private document key<br>
    *previous*: can reference Clone or Delegate log entries for confirmation

* **Revoke** (`op=1`): invalidates a Terminate log entry; only published for new information<br>
    *doc*: hash of doc and key in DID Document<br>
    *sig*: doc signed by private revocation key<br>
    *previous*: can reference "Create" or "Update" and always "Terminate"

* **Create** (`op=2`): start new DID<br>
    *doc*: hash of DID Document<br>
    *sig*: doc signed by private document key<br>
    *previous*: has only a reference when created using clone pointing to this clone entry

* **Update** (`op=3`): update DID<br>
    *doc*: hash of DID Document<br>
    *sig*: doc signed by private document key from previous version DID version<br>
    *previous*: reference previous revoke log entry

* **Clone** (`op=4`): create linked DID with same "doc" but new keys and logs<br>
    *doc*: hash of new DID Document (same payload but different keys and logs)<br>
    *sig*: doc signed by the new private document key<br>
    *previous*: reference Create or Update log entry


## Verification Steps ## {#verification}

Processing the log provides unambiguous evidence for authenticity, correctness, and timeliness of resolving a DID to the DID document. This section describes all operations to perform independent verification when resolving a DID. 

Note: Use the `--show-verification` flag in the [`oydid` command line utility](https://github.com/OwnYourData/oydid/tree/main/cli) to retrieve raw data for performing verification.

### Hash value calculation ### {#calculate_hash}

Perform the following steps to verify that a hash value conforms to a message:

1. identify encoding algorithm in multibase string (first character)<br>
    you can use the information here: [https://github.com/multiformats/multibase](https://github.com/multiformats/multibase)<br>
    example: if the string starts with "z" it is base58btc-encoding

2. identify hashing algorithm in multibase string (second & third character)<br>
    you can use the information here: [https://github.com/multiformats/multicodec#multicodec-table](https://github.com/multiformats/multicodec#multicodec-table)<br>
    example: if the string starts with "zQm" it is the sha2-256 hash algorithm

3. if the message is a JSON is must be transformed to its canonical form based on this standard (currently still in draft): 
    [https://datatracker.ietf.org/doc/html/rfc8785](https://datatracker.ietf.org/doc/html/rfc8785) 

4. calculate hash value from message (check if pre-processing step #3 applies!) using the algorithm from step #2

5. encode hash value using encoding algorithm from step #1

✅ This verification step passes iif presented hash value and message match.


### Log record retrieval ### {#retrieve_log}

Retrieve log record from a repository based on hash value...

### Signature verification ### {#verify_signature}

Verifiy signature in a log record...


Test Vectors {#test}
============

## Samples ## {#samples}

This section provides samples of typical OYDID DIDs.

<div class=example id=sample_new>
A DID created with a simple payload:

`did:oyd:zQmZPsXSt3QbKZvjPEMdZZ6q8MtfFhPSeQmKx2g8khZq6YG`
</div>


<div class=example id=sample_update>
A DID created and updated can be resolved using the following two identifier:

`did:oyd:zQmZjUKm2n28LHkEufYNHicRbt31aAG8g6fwuTp35Nxmzzy`

`did:oyd:zQmbePD4HavGGvmEQfGaAS5h9ms2BNZVewXVx3T7w9ypPgA`
</div>

<div class=example id=sample_external>
A DID created and updated can be resolved using the following two identifier:

`did:oyd:zQmNPqMwUWBuUSQnwFBacLtGFzdfFCDYS7msZntERecPj6r@https://did2.data-container.net`

Note: a W3C conform representation is the percent-encoded `@`<br>`did:oyd:zQmNPqMwUWBuUSQnwFBacLtGFzdfFCDYS7msZntERecPj6r%40https://did2.data-container.net`
</div>


## Command line tool ## {#cli}

*Prerequisite:* install the `oydid` command from https://github.com/OwnYourData/did-cmd/ or   
use the following Docker command to run the OYDID command line tool without installation (based on [public Docker image `oydeu\oydid`](https://hub.docker.com/r/oydeu/oydid)):

```bash
docker run -it --rm oydeu/oydid
```

*EXAMPLE 4: Various DIDs and useful commands*

* `did:oyd:zQmZ8DEGQtJcpoQDMKYJkTiQn9dQLM2QzvmDQXuj8vCfvdj` (new DID)

    → show information with:

    ```bash
    oydid read zQmZ8DEGQtJcpoQDMKYJkTiQn9dQLM2QzvmDQXuj8vCfvdj
    ```

* `did:oyd:zQmNUV1MJ5xKkFm6Lc9EKqAauGzbKP7amvbyxsx79mKwqPB` (updated DID)

    → show DID document using old DID

    ```bash
    oydid read zQmdxfGRfFEnLoJ9RTiyzG9TPBhK7q6zsqrGFVzuxVPv4dq
    ```

* `did:oyd:zQmTbKdyF3661TB92683hiqEBzo44eNJU8HNDwt4hAt69K1` (deactivated DID)

    → DID cannot be resolved

    ```bash
    oydid read zQmTbKdyF3661TB92683hiqEBzo44eNJU8HNDwt4hAt69K1
    ```
    **Result:** `Error: cannot resolve DID`

    → Logs can be shown with the command
    ```bash
    oydid logs zQmTbKdyF3661TB92683hiqEBzo44eNJU8HNDwt4hAt69K1
    ```

Note: read in the [OYDID White Paper](https://github.com/OwnYourData/did-cmd/blob/main/docs/OYDIDintro.pdf) Appendix A for a step-by-step tutorial


Security and Privacy Considerations {#privacy}
===================================

There are a number of security and privacy considerations that implementers will want to take into consideration upon working with this specification.

## Centralized Storage ## {#centralized_storage}

* maintainer of OYDID repository cannot change content due to hash values
* the problem of a repository being unavailable can be mitigated by cloning DID to a local repository
* the problem of a storage provider hindering publication of updates can be also mitigated by cloning DID to other repositories and publishing updates using initial private keys there

## Key Rotation ## {#key_rotatioin}

Key Rotation is supported through using different key(s) when publishing an update.

## Scaling ## {#key_rotation}

To scale access for frequently requested DID it is recommended to clone a DID to multiple locations.

## Updating Clones ## {#updating_clones}

* it is in the interest of the DID author to provide consistent information
* recommended approach    
    * create new DID (but do not publish revocation log record for old DID yet)
    * clone new DID to all relevant hosts
    * only then publish revocation log

## Long-term Usage ## {#long_term_usage}

* Multiformat used to ensure digest agility    
* it is in the nature of centralized systems that they are offline and DID maintainerd need to ensure that a minimum number of clones are always online (based on how valuable the DID is)

## Correlation {#correlation}

The source for generating OYDID identifiers are hashing algorithms which have as intrinsic property as much entropy as possible and therefore offer no direct means of correlation.

## Cryptographic Agility {#cryptographic_agility}

As described in the [[#operations]] section, currently only ed25519 public keys are supported. This can be easily extended by using other multicodec encoded keys. The multicodec table already has support for BLS keys for example, so adding support for it would be trivial. Once good post quantum cryptography becomes more widely available extending OYDID to support that will also be fairly straight forward.

Ethical Aspects {#ethics}
===============

DIDs provide a standardization to share specific information (public keys, service endpoints) publicly. However, storing this information on a distributed ledger requires resources (storage and processing capacities) that may seem unjustified for certain use cases where the immediate benefit is not obvious. As a result, in some cases the DID concept is already excluded in the design phase, which hinders adoption and further growth of using DIDs and Verifiable Credentials. Another challenge for DIDs can be privacy-preserving data exchanges and the simple fact of resolving a DID at a public ledger might allow it to infer certain information.

Therefore, OYDID takes the approach to not maintain DID and DID Document on a public ledger but on one or more local storages (that usually are publicly available). Through cryptographically linking the DID identifier to the DID Document, and furthermore linking the DID Document to a chained provenance trail (log), the same security and validation properties as a traditional DID are  maintained while avoiding highly redundant storage and general public access.

OYDIDs are therefore excellently suited for local settings with a limited number of stakeholders interested in resolving those DIDs. Example use cases are:

* test runs that require to create repeatedly a large number of new DIDs
* settings in secured or remote areas without access to the internet
* (transient) storage solutions (e.g., Semantic Containers) that can generate large quantities of DIDs as a way to access specific information (e.g., consent receipts, provenance artefacts, delegation to read certain database queries)


Reference Implementation {#implementation}
========================

Work in progress as part of a research project funded by the “IKT der Zukunft” program from the Federal Ministry for Transport, Innovation and Technology in Austria – [FFG Projekt 887052](https://projekte.ffg.at/projekt/4125456). 

